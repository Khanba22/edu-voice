from groq import Groq

def extractTopic(text):
    # print(text)
    client = Groq(
        api_key="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",
    )
    completion = client.chat.completions.create(
        model="llama3-8b-8192",
        messages=[
            {
                "role": "system",
                "content": "When a large text is provided, identify the main topic and its relevant subtopics. Present the output in this exact JSON        format:\\n\\njson\\nCopy code\\n{\\n   \\\"main_topic\\\": \\\"Main Topic\\\",\\n   \\\"subtopics\\\": [\\n      \\\"Subtopic 1\\\",\\n         \\\"Subtopic 2\\\",\\n         \\\"Subtopic 3\\\",\\n      ...\\n   ]\\n}\\nEnsure all subtopics are framed in context with the main topic, and    listed within a single JSON array under   the \\\"subtopics\\\" field."
            },
            {
                "role": "user",
                "content": "IP Addresses\n\nCONTENTS\n\nINTRODUCTION\n\nCLASSFUL ADDRESSING\n\nDifferent Network Classes\n\nSubnetting\n\nClassless     Addressing\n\nSupernetting\n\nCIDR (classless Interdomain Routing)\n\nINTRODUCTION\n\nAn IP address is a\n32-bit\naddress.\n\nWhat is an IP     Address?\n\nThe IP addresses\nare\nunique.\n\nAddress Space\n\naddr15\n\naddr1\n\naddr2\n\naddr41\n\naddr31\n\naddr226\n\n…………..\n\n…………..  \n\n…………..\n\n…………..\n\n…………..\n\n…………..\n\n…………..\n\nAddress space rule\n\naddr15\n\naddr1\n\naddr2\n\naddr41\n\naddr31\n\naddr226\n\n………….. \n\n…………..\n\n…………..\n\n…………..\n\n…………..\n\n…………..\n\n…………..\n\nThe address space in a protocol\n\nThat uses N-bits to define an\n\nAddress  is:\n\n2N\n\nThe address space of IPv4 is\n\n232\nor\n4,294,967,296.\n\nIPv4 address space\n\n01110101 10010101 00011101 11101010\n\nBinary  Notation\n\nFigure 4-1\n\nDotted-decimal notation\n\n0111 0101 1001 0101 0001 1101 1110 1010\n\nHexadecimal Notation\n\n75 95 1D     EA\n\n0x75951DEA\n\nExample 1\n\nChange the following IP address from binary\nnotation to dotted-decimal notation.\n\n10000001 00001011 00001011    11101111\n\nSolution\n\n129.11.11.239\n\nExample 2\n\nChange the following IP address from\ndotted-decimal notation to binary\nnotation:\n\n111.56.    45.78\n\nSolution\n\n01101111 00111000 00101101 01001110\n\nExample 3\n\nSolution\n\nFind the error in the following IP Address\n\n111.56.045.  78\n\nThere are no leading zeroes in\n\nDotted-decimal notation (045)\n\nExample 3 (continued)\n\nSolution\n\nFind the error in the following IP  Address\n\n75.45.301.14\n\nIn decimal notation each number <= 255\n\n301 is out of the range\n\nExample 4\n\nSolution\n\nChange the following    binary IP address\n\nHexadecimal notation\n\n10000001 00001011 00001011 11101111\n\n0X810B0BEF or 810B0BEF16\n\nCLASSFUL\n\nADDRESSING\n\nFigure   4-2\n\nOccupation of the address space\n\nIn classful addressing the address space is\n\ndivided into 5 classes:\n\nA, B, C, D, and E.\n\nFigure  4-3\n\nFinding the class in binary notation\n\nFigure 4-4\n\nFinding the address class\n\nExample 6\n\nSolution\n\nFind the class of the following   IP addresses\n\n00000001 00001011 00001011 11101111\n\n11000001 00001011 00001011 11101111\n\n00000001 00001011 00001011 11101111\n\n1st is 0,    hence it is Class A\n\n11000001 00001011 00001011 11101111\n\n1st and 2nd bits are 1, and 3rd bit is 0 hence, Class C\n\nFigure 4-5\n\nFinding the     class in decimal notation\n\nExample 7\n\nSolution\n\nFind the class of the following addresses\n\n158.223.1.108\n\n227.13.14.88\n\n158.223.1.  108\n\n1st byte = 158 (128<158<191) class B\n\n227.13.14.88\n\n1st byte = 227 (224<227<239) class D\n\nIP address with appending port     number\n\n158.128.1.108:25\n\nthe octet before colon is the IP address\n\nThe number of colon (25) is the port number\n\nFigure 4-6\n\nNetid and    hostid\n\nNetwork Addresses\n\nThe network address is the first address.\n\nThe network address defines the network to the\nrest of the Internet.  \n\nGiven the network address, we can find the\nclass of the address, the block, and the range of\nthe addresses in the block\n\nIn classful  addressing,\nthe network address\n(the first address in the block)\nis the one that is assigned\nto the organization.\n\nExample     8\n\nSolution\n\nGiven the network address 132.21.0.0, find the\n\nclass, the block, and the range of the\naddresses\n\nThe 1st byte is between     128 and 191.\n\nHence, Class B\n\nThe block has a netid of 132.21.\n\nThe addresses range from\n\n132.21.0.0 to 132.21.255.255.\n\nMask\n\nA mask   is a 32-bit binary number.\n\nThe mask is ANDeD with IP address to get\n\nThe block address (Network address)\n\nMask And IP address = Block  Address\n\nFigure 4-10\n\nMasking concept\n\nFigure 4-11\n\nAND operation\n\nThe network address is the\nbeginning address of each block.\nIt can    be found by applying\nthe default mask to\nany of the addresses in the block\n(including itself).\nIt retains the netid of the block\nand sets the     hostid to zero.\n\nDefault Mask\n\nClass A default mask is 255.0.0.0\n\nClass B default mask is 255.255.0.0\n\nClass C Default mask 255.255.255.    0\n\nChapter 5\n\nSubnetting/Supernetting\nand\nClassless Addressing\n\nCONTENTS\n\nSUBNETTING\n\nSUPERNETTING\n\nCLASSLESS     ADDRSSING\n\nSUBNETTING\n\n5.1\n\nIP addresses are designed with\ntwo levels of hierarchy.\n\nFigure 5-1\n\nA network with two levels   of\nhierarchy (not subnetted)\n\nFigure 5-2\n\nA network with three levels of\n\nhierarchy (subnetted)\n\nNote\n\nSubnetting is done by borrowing     bits from the\nhost part and add them the network part\n\nFigure 5-3\n\nAddresses in a network with\nand without subnetting\n\nFigure   5-5\n\nDefault mask and subnet mask\n\nGiven an IP address, we can find the\nsubnet address the same way we found the\nnetwork address. We apply  the mask to the\naddress. We can do this in two ways:\nstraight or short-cut.\n\nFinding the Subnet Address\n\nStraight Method\n\nIn the straight    method, we use binary\nnotation for both the address and the\nmask and then apply the AND operation\nto find the subnet address.\n\nExample    9\n\nWhat is the subnetwork address if the\ndestination address is 200.45.34.56 and\nthe subnet mask is 255.255.240.0?\n\nSolution\n\n11001000     00101101 00100010 00111000\n\n11111111 11111111 11110000 00000000\n\n11001000 00101101 00100000 00000000\n\nThe subnetwork address is 200.45.32.0.  \n\nShort-Cut Method\n\n** If the byte in the mask is 255, copy\nthe byte in the address.\n\n** If the byte in the mask is 0, replace\nthe byte in    the address with 0.\n\n** If the byte in the mask is neither 255\nnor 0, we write the mask and the address\nin binary and apply the AND operation. \n\nExample 10\n\nWhat is the subnetwork address if the\ndestination address is 19.30.80.5 and the\nmask is 255.255.192.0?\n\nFigure     5-6\n\nSolution\n\nFigure 5-7\n\nComparison of a default mask and\n\na subnet mask\n\nThe number of subnets must be\na power of 2.\n\nExample   11\n\nA company is granted the site address\n201.70.64.0 (class C). The company needs\nsix subnets. Design the subnets.\n\nSolution\n\nThe number     of 1s in the default\nmask is 24 (class C).\n\nSolution (Continued)\n\nThe company needs six subnets. This number 6 is not a power\nof 2. The next  number that is a power of 2 is 8 (23). We need 3\nmore 1s in the subnet mask. The total number of 1s in the subnet\nmask is 27 (24 + 3).\n\nThe  total number of 0s is 5 (32 - 27).\n\nSolution (Continued)\n\n11111111 11111111 11111111 11100000\n\nor\n\n255.255.255.224\n\nThe number of  subnets is 8.\n\nThe number of addresses in each subnet is 25 (5 is the\nnumber of 0s) or 32.\n\nSee Next slide\n\nFigure 5-8\n\nExample     3\n\nExample 12\n\nA company is granted the site address\n181.56.0.0 (class B). The company needs\n1000 subnets. Design the subnets.    \n\nSolution\n\nThe number of 1s in the default mask is 16\n(class B).\n\nSolution (Continued)\n\nThe company needs 1000 subnets. This number is    not a power\nof 2. The next number that is a power of 2 is 1024 (210). We\nneed 10 more 1s in the subnet mask.\n\nThe total number of 1s in the    subnet mask is 26 (16 + 10).\n\nThe total number of 0s is 6 (32 − 26).\n\nSolution (Continued)\n\nThe mask is\n\n11111111 11111111 11111111    11000000\n\nor\n\n255.255.255.192.\n\nThe number of subnets is 1024.\n\nThe number of addresses in each subnet is\n\n26 (6 is the number of 0s) or     64.\n\nSee next slide\n\nFigure 5-9\n\nExample 4\n\nFigure 5-10\n\nVariable-length subnetting\n\nSUPERNETTING\n\nWhat is suppernetting? \n\nSupernetting is the opposite of subnetting\n\nIn subnetting you borrow bits from the host\npart\n\nSupernetting is done by borrowing bits    from\nthe network side.\n\nAnd combine a group of networks into one\nlarge supernetwork.\n\nFigure 5-11\n\nA supernetwork\n\nRules:\n\n▲ The   number of blocks must be a power of 2 (1,\n2, 4, 8, 16, . . .).\n\n▲ The blocks must be contiguous in the address\nspace (no gaps between the     blocks).\n\n▲ The third byte of the first address in the\nsuperblock must be evenly divisible by the number\nof blocks. In other words, if the  number of blocks is\nN, the third byte must be divisible by N.\n\nExample 5\n\nA company needs 600 addresses. Which of\nthe following set of class   C blocks can be\nused to form a supernet for this company?\n\n198.47.32.0\n198.47.33.0\n198.47.34.0\n\n198.47.32.0\n198.47.42.0\n198.47.52.0\n198.    47.62.0\n\n198.47.31.0\n198.47.32.0\n198.47.33.0\n198.47.52.0\n\n198.47.32.0\n198.47.33.0\n198.47.34.0\n198.47.35.0\n\nSolution\n\n1: No, there     are only three blocks.\n\n2: No, the blocks are not contiguous.\n\n3: No, 31 in the first block is not divisible by 4.\n\n4: Yes, all three     requirements are fulfilled.\n\nIn subnetting,\nwe need the first address of the\nsubnet and the subnet mask to\ndefine the range of addresses.  \n\nIn supernetting,\nwe need the first address of\nthe supernet\nand the supernet mask to\ndefine the range of addresses.\n\nFigure  5-12\n\nComparison of subnet, default,\n\nand supernet masks\n\nExample 13\n\nWe need to make a supernetwork out of 16\nclass C blocks. What is  the supernet mask?\n\nSolution\n\nWe need 16 blocks. For 16 blocks we need to change four 1s to 0s in\nthe default mask. So the mask     is\n\n11111111 11111111 11110000 00000000\n\nor\n\n255.255.240.0\n\nExample 14\n\nA supernet has a first address of 205.16.32.0 and a\nsupernet     mask of 255.255.248.0. A router receives three\npackets with the following destination addresses:\n\n205.16.37.44\n\n205.16.42.56\n\n205.17.33. 76\n\nWhich packet belongs to the supernet?\n\nSolution\n\nWe apply the supernet mask to see if we can find\nthe beginning address.\n\n205.16.37.    44 AND 255.255.248.0\n🡺 205.16.32.0\n\n205.16.42.56 AND 255.255.248.0\n🡺 205.16.40.0\n\n205.17.33.76 AND 255.255.248.0\n🡺 205.17.32.0\n\nOnly   the first address belongs to this supernet.\n\nExample 15\n\nA supernet has a first address of 205.16.32.0 and a\nsupernet mask of 255.255.248.0.     How many blocks are\nin this supernet and what is the range of addresses?\n\nSolution\n\nThe supernet has 21 1s. The default mask has 24 1s.    \nSince the difference is 3, there are 23 or 8 blocks in\nthis supernet. The blocks are 205.16.32.0 to\n205.16.39.0. The first address is 205.16.   32.0. The last\naddress is 205.16.39.255.\n\nCLASSLESS\n\nADDRESSING\n\n5.3\n\nFigure 5-13\n\nVariable-length blocks\n\nNumber of Addresses in a   Block\n\nThere is only one condition on the number\nof addresses in a block; it must be a power\nof 2 (2, 4, 8, . . .). A household may be\ngiven     a block of 2 addresses. A small\nbusiness may be given 16 addresses. A large\norganization may be given 1024 addresses.\n\nBeginning    Address\n\nThe beginning address must be evenly divisible\nby the number of addresses. For example, if a\nblock contains 4 addresses, the  beginning\naddress must be divisible by 4. If the block has\nless than 256 addresses, we need to check only\nthe rightmost byte. If it has less  than 65,536\naddresses, we need to check only the two\nrightmost bytes, and so on.\n\nExample 16\n\nWhich of the following can be the beginning  address of a block\nthat contains 1024 addresses?\n\n205.16.37.32\n\n190.16.42.0\n\n17.17.32.0\n\n123.45.24.52\n\nSolution\n\nTo be divisible by     1024, the rightmost byte of an address\nshould be 0 and the second rightmost byte must be divisible by\n4. Only the address 17.17.32.0 meets this   condition.\n\nFigure 5-14\n\nSlash notation\n\nSlash notation is also called\nCIDR\nnotation.\n\nExample 17\n\nA small organization is given a    block with the\nbeginning address and the prefix length\n205.16.37.24/29 (in slash notation). What is the range\nof the block?\n\nThe beginning    address is 205.16.37.24. To find\nthe last address we keep the first 29 bits and\nchange the last 3 bits to 1s.\n\nBeginning: 11001111 00010000    00100101 00011000\n\nEnding : 11001111 00010000 00100101 00011111\n\nThere are only 8 addresses in this block.\n\nSolution\n\nExample 17   cont’d\n\nWe can find the range of addresses in Example 17 by\nanother method. We can argue that the length of the\nsuffix is 32 − 29 or 3. So    there are 23 = 8 addresses in\nthis block. If the first address is 205.16.37.24, the last\naddress is 205.16.37.31 (24 + 7 = 31).\n\nA block in    classes A, B, and C\ncan easily be represented in slash\nnotation as\nA.B.C.D/ n\nwhere n is\neither 8 (class A), 16 (class B), or\n24 (class C).  \n\nExample 18\n\nWhat is the network address if one of the addresses is\n167.199.170.82/27?\n\nSolution\n\nThe prefix length is 27, which means  that we\nmust keep the first 27 bits as is and change the\nremaining bits (5) to 0s. The 5 bits affect only\nthe last byte. The last byte is     01010010.\nChanging the last 5 bits to 0s, we get 01000000\nor 64. The network address is\n167.199.170.64/27.\n\nExample 19\n\nAn organization is   granted the block 130.34.12.64/26. The\norganization needs to have four subnets. What are the subnet\naddresses and the range of addresses for    each subnet?\n\nSolution\n\nThe suffix length is 6. This means the total\nnumber of addresses in the block is 64 (26). If\nwe create four subnets,     each subnet will have 16\naddresses.\n\nSolution (Continued)\n\nLet us first find the subnet prefix (subnet mask). We need four\nsubnets, which     means we need to add two more 1s to the site\nprefix. The subnet prefix is then /28.\n\nSubnet 1: 130.34.12.64/28 to 130.34.12.79/28.\n\nSubnet 2   : 130.34.12.80/28 to 130.34.12.95/28.\n\nSubnet 3: 130.34.12.96/28 to 130.34.12.111/28.\n\nSubnet 4: 130.34.12.112/28 to 130.34.12.127/28.\n\nSee     Figure 5.15\n\nFigure 5-15\n\nExample 19 cont’d\n\nExample 20\n\nAn ISP is granted a block of addresses starting with\n190.100.0.0/16. The ISP  needs to distribute these addresses to\nthree groups of customers as follows:\n\n1. The first group has 64 customers; each needs 256 addresses.  \n\n2. The second group has 128 customers; each needs 128\naddresses.\n\n3. The third group has 128 customers; each needs 64 addresses.\nDesign   the subblocks and give the slash notation for each\nsubblock. Find out how many addresses are still available after\nthese allocations.   \n\nSolution\n\nGroup 1\n\nFor this group, each customer needs 256 addresses. This means the\nsuffix length is 8 (28 = 256). The prefix length is  then 32 − 8 = 24.\n\n01: 190.100.0.0/24 🡺190.100.0.255/24\n\n02: 190.100.1.0/24 🡺190.100.1.255/24\n\n…………………………………..\n\n64: 190.100.63.0/24🡺190. 100.63.255/24\n\nTotal = 64 × 256 = 16,384\n\nSolution (Continued)\n\nGroup 2\n\nFor this group, each customer needs 128 addresses. This     means\nthe suffix length is 7 (27 = 128). The prefix length is then 32 − 7 =\n25. The addresses are:\n\n001: 190.100.64.0/25 🡺190.100.64.127/   25\n\n002: 190.100.64.128/25 🡺190.100.64.255/25\n\n………………..\n\n128: 190.100.127.128/25 🡺190.100.127.255/25\n\nTotal = 128 × 128 = 16,  384\n\nSolution (Continued)\n\nGroup 3\n\nFor this group, each customer needs 64 addresses. This means the\nsuffix length is 6 (26 = 64). The     prefix length is then 32 − 6 = 26.\n\n001:190.100.128.0/26 🡺190.100.128.63/26\n\n002:190.100.128.64/26 🡺190.100.128.127/    26\n\n…………………………\n\n128:190.100.159.192/26 🡺190.100.159.255/26\n\nTotal = 128 × 64 = 8,192\n\nSolution (Continued)\n\nNumber of granted     addresses: 65,536\n\nNumber of allocated addresses: 40,960\n\nNumber of available addresses: 24,576"
            }
        ],
        temperature=1,
        max_tokens=1024,
        top_p=1,
        stream=False,
        response_format={"type": "json_object"},
        stop=None,
    )

    message = completion.choices[0].message
    content = message.content
    return content
